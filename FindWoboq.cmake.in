# this "lookup code" uses caching and will only be executed once
if("${WOBOQ_DATA}" STREQUAL "")
    # when the carnary variable WOBOQ_DATA is not set we assume that this is
    # the first run of this script.
    #
    # lookup some executables. as this script will be configured by cmake
    # during configure time, we already know where to look
    # (CMAKE_INSTALL_PREFIX), and can thus can simplify the search:
    find_program(WOBOQ_GENERATOR
        codebrowser_generator
        PATHS @CMAKE_INSTALL_PREFIX@/bin
        NO_DEFAULT_PATH
        "create html")
    # same for the indexer
    find_program(WOBOQ_INDEXER
        codebrowser_indexgenerator
        PATHS @CMAKE_INSTALL_PREFIX@/bin
        NO_DEFAULT_PATH
        "create index")
    # the static data-files:
    SET(WOBOQ_DATA  "@CMAKE_INSTALL_PREFIX@/share/woboq/data" CACHE INTERNAL "woboq data")
    # and this is where we ouput into. this is a fixed location.
    SET(WOBOQ_OUTDIR "${CMAKE_BINARY_DIR}/woboq" CACHE INTERNAL "woboq outdir")
    # because of using the cached variable, this message will only appear once,
    # even when the "find_package()" macro is called multiple times
    message("-- woboq found in '@CMAKE_INSTALL_PREFIX@', outputting into '${WOBOQ_OUTDIR}'")
endif()

# the global target to tie everything together by parsing all output into the
# various index.html -- seems to mostly work.
#
# splitting the "data+index" step from the actual "generator" allows to add
# content from multiple targets (invocations of the generator) into one
# browsable "database" with one "data" folder in the root of the dir-tree
if(NOT TARGET woboq)
    add_custom_target(woboq
        COMMAND cp -vr ${WOBOQ_DATA} ${WOBOQ_OUTDIR}
        COMMAND ${WOBOQ_INDEXER} ${WOBOQ_OUTDIR} -d /data
        COMMENT "provide static data and configure index.html"
        )
endif()

# also cleanup the woboq-folder when asked to:
set_property(DIRECTORY APPEND PROPERTY ADDITIONAL_MAKE_CLEAN_FILES
    ${WOBOQ_OUTDIR}
    )

# a nice convenience target, which provides a local webserver to test the
# result.  serves directly from the output-folder:
if(NOT TARGET woboq-serve)
    add_custom_target(woboq-serve
        COMMAND python -m SimpleHTTPServer
        WORKING_DIRECTORY ${WOBOQ_OUTDIR}
        COMMENT "serving woboq from '${WOBOQ_OUTDIR}' at http://localhost:8000"
        DEPENDS woboq
        )
endif()

# this internal function executes woboq for _one_ target, into a subdir of
# WOBOQ_OUTDIR:
function(_woboqCreateNewGeneratorTarget)
    set(options )
    set(multiValueArgs )
    set(oneValueArgs TARGET)
    cmake_parse_arguments(_woboq "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN} )

    # create function-local variables:
    set(trgt ${_woboq_TARGET})
    # the outdir cannot be overridden from the outside... in theory yes, but
    # does not play well with the global "woboq" and "woboq-serve" targets
    set(outdir ${WOBOQ_OUTDIR})

    # this retrieves where the CMakeLists of this target is located. Will use
    # this directory as src-dir in the "-p" option for woboq:
    get_property(srcdir TARGET ${trgt} PROPERTY SOURCE_DIR)
    # this is the "woboq" project name TODO: add current git-sha1 as revision?
    set(srcprjct ${trgt}:${srcdir})

    # add a second "project" for files generated inside
    # the global build directory. this will pout all generated file into a
    # parallel page-tree in the served html.
    get_property(blddir TARGET ${trgt} PROPERTY BINARY_DIR)
    set(bldprjct ${trgt}/build:${blddir})

    # the actual, precious step: run the generator
    add_custom_command(OUTPUT ${outdir}/${trgt}
        # take care to have a clean output location:
        COMMAND rm -rf ${outdir}/${trgt}
        # use two projects, one with the source and one with the build. the
        # second stage (indexgenerator) will figure it out later.
        COMMAND ${WOBOQ_GENERATOR} -d /data -a -b ${CMAKE_BINARY_DIR} -o ${outdir} -p ${srcprjct} -p ${bldprjct}
        # sadly, this _has_ to depend on trgt, to be sure that any generated
        # file is present. cmake has no way to specify dependency on single
        # files from sudirectories. this will at least not build the ALL target
        DEPENDS ${trgt}
        )
    # wrap this into a proper target
    add_custom_target(woboq-${trgt} DEPENDS ${outdir}/${trgt})
    # and add the sub-target to the "global" woboq target
    add_dependencies(woboq woboq-${trgt})

    install(DIRECTORY ${outdir}/${trgt}
        DESTINATION share/doc/woboq
        )

    # add woboq files to clean target
    set_property(DIRECTORY APPEND PROPERTY ADDITIONAL_MAKE_CLEAN_FILES
        ${outdir}/${trgt})

endfunction()

# the public interface:
function(CreateBrowsableDocumentation)
    set(options )
    # allow calling this function with single argument or a list
    set(multiValueArgs TARGETS)
    set(oneValueArgs TARGET)
    cmake_parse_arguments(_woboq "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN} )
    # and then call the main-function for each target of the list:
    foreach(trgt ${_woboq_TARGETS} ${_woboq_TARGET})
        # guard against multiple calls:
        if(NOT TARGET woboq-${trgt})
            _woboqCreateNewGeneratorTarget(TARGET ${trgt})
        endif()
    endforeach()
endfunction()
